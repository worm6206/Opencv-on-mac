#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <sstream>
#include <opencv2/video/background_segm.hpp>
using namespace cv;
using namespace std;


VideoCapture stream1(0);

Mat cameraFrame1;
Mat cameraFrame2;
int flag;

int main() {
    namedWindow("cam",1);
    stream1.read(cameraFrame2);
    while (true) {
        stream1.read(cameraFrame1);
        Mat diff = cameraFrame2 - cameraFrame1;
        //imshow("cam1", cameraFrame1);
        //imshow("cam2", cameraFrame2);
        cvtColor(diff,diff,CV_RGB2GRAY);
        imshow("cam", diff);
        stream1.read(cameraFrame2);
        if(waitKey(10)==27) break;
    }
    return 0;
}


/*



//global variables
Mat frame; //current frame
Mat fgMaskMOG; //fg mask generated by MOG method
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor
int keyboard;

//function declarations
void help();
void processVideo(char* videoFilename);
void processImages(char* firstFrameFilename);


int main(int argc, char* argv[])
{

    
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG");
    
    //create Background Subtractor objects
    //NOTE HERE!!!!
    pMOG= new BackgroundSubtractorMOG2(); //MOG approach
    
    
    //create the capture object
    VideoCapture capture(0);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video"<< endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
        }
        //update the background model
        //AND HERE!!!
        pMOG->operator()(frame, fgMaskMOG);
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG", fgMaskMOG);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
    }
    //delete capture object
    capture.release();
    
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
 */
